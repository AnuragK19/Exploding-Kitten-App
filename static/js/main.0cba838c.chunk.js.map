{"version":3,"sources":["Components/AuthScreen.jsx","Components/LeaderBoard.jsx","Redux/Card/cardActions.js","Components/GameScreen.jsx","Redux/Card/cardReducer.js","Redux/rootReducer.js","store.js","App.js","index.js"],"names":["require","config","AuthScreen","inputRef","useRef","navigate","useNavigate","useEffect","current","focus","className","src","height","width","alt","type","ref","placeholder","onClick","playerName","value","length","alert","axios","post","process","username","then","res","console","log","catch","err","LeaderBoard","CARD_ACTION_TYPES","cardSetup","cardObject","cardArray","start","push","Math","floor","random","payload","showFlippedCard","cardName","message","dataObject","cardConditions","data","dispatch","totalDefuseCard","explodeCard","GameScreen","search","useLocation","URLSearchParams","get","useDispatch","defaultStates","useSelector","state","card","drawnCard","Fragment","style","textAlign","defuseCardCount","randomCardIndex","deckOfCards","randomCard","splice","document","querySelector","transform","remainingCards","catCardData","shuffleCardData","defuseCard","Array","fill","map","x","gameStatus","initialState","numberOfCards","finalScore","combineReducers","action","middleware","thunk","store","createStore","rootReducer","compose","applyMiddleware","App","path","element","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.0cba838c.chunk.js","sourcesContent":["import axios from 'axios';\r\nimport React, { useRef, useEffect } from 'react'\r\nimport { useNavigate } from \"react-router-dom\"\r\nrequire('dotenv').config()\r\n\r\nfunction AuthScreen() {\r\n    const inputRef = useRef();\r\n    const navigate = useNavigate()\r\n    const handleSubmit = () => {\r\n        const playerName = inputRef.current.value;\r\n        if (playerName.length === 0 || playerName === \"\") {\r\n            alert(\"Please provide a username\");\r\n        } else {\r\n            navigate(`/game-screen?name=${playerName}`)\r\n            // API call to store name for a new user or check if the username already exist\r\n            axios.post(`${process.env.REACT_APP_BASE_URL}${process.env.REACT_APP_SET_USERNAME}`, { username: playerName }).then(res => {\r\n                console.log(res)\r\n            }).catch(err => {\r\n                console.log(err)\r\n            })\r\n        }\r\n    };\r\n    useEffect(() => {\r\n        inputRef.current.focus()\r\n    }, [])\r\n    return (\r\n        <section className=\"bg-wrap\">\r\n            <div className=\"login-screen\">\r\n                <img src=\"/loader.gif\" height=\"100px\" width=\"150px\" alt=\"\" />\r\n                <input type=\"text\" ref={inputRef} placeholder=\"Username\" />\r\n                <button onClick={handleSubmit} className=\"btn-submit\">\r\n                    Start Game\r\n                </button>\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default AuthScreen\r\n","import React from 'react'\r\n\r\nfunction LeaderBoard() {\r\n    return (\r\n        <>\r\n            <h2>#Leaderboard</h2>\r\n            <table>\r\n                <tr>\r\n                    <td>Trojan</td>\r\n                    <td>50</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Spyker</td>\r\n                    <td>40</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Hitman</td>\r\n                    <td>30</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Deadman</td>\r\n                    <td>30</td>\r\n                </tr>\r\n                <tr>\r\n                    <td>Destroyer</td>\r\n                    <td>30</td>\r\n                </tr>\r\n            </table>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default LeaderBoard\r\n","export const CARD_ACTION_TYPES = {\r\n  CAT_CARD: \"CAT_CARD\",\r\n  DEFUSE_CARD: \"DEFUSE_CARD\",\r\n  EXPLODE_CARD: \"EXPLODE_CARD\",\r\n  SHUFFLE_CARD: \"SHUFFLE_CARD\",\r\n  RESET_GAME: \"RESET_GAME\",\r\n  ADD_RANDOM_CARDS: \"ADD_RANDOM_CARDS\",\r\n  CARD_FLIPPED: \"CARD_FLIPPED\",\r\n  REDUCE_DEFUSE_CARDS: \"REDUCE_DEFUSE_CARDS\",\r\n  GAME_WON: \"GAME_WON\",\r\n};\r\n\r\nconst resetGame = () => {\r\n  return {\r\n    type: CARD_ACTION_TYPES.RESET_GAME,\r\n  };\r\n};\r\n\r\nconst cardSetup = () => {\r\n  const cardObject = {\r\n    1: \"CAT_CARD\",\r\n    2: \"DEFUSE_CARD\",\r\n    3: \"SHUFFLE_CARD\",\r\n    4: \"EXPLODE_CARD\",\r\n  };\r\n  let cardArray = [];\r\n  const totalCardCount = 5;\r\n  // Get random card from\r\n  const getRandomNumber = () => Math.floor(Math.random() * (5 - 1) + 1);\r\n  for (let start = 0; start < totalCardCount; start++)\r\n    cardArray.push(cardObject[getRandomNumber()]);\r\n  return { type: CARD_ACTION_TYPES.ADD_RANDOM_CARDS, payload: cardArray };\r\n};\r\n\r\nconst showFlippedCard = (cardName, message) => {\r\n  let dataObject = {\r\n    cardName,\r\n    message,\r\n  };\r\n  console.log(dataObject);\r\n  return { type: CARD_ACTION_TYPES.CARD_FLIPPED, payload: dataObject };\r\n};\r\n\r\nconst shuffleCard = () => {\r\n  return {\r\n    type: CARD_ACTION_TYPES.SHUFFLE_CARD,\r\n  };\r\n};\r\n\r\nconst explodeCard = (data) => {\r\n  if (data.totalDefuseCard > 0) {\r\n    return {\r\n      type: CARD_ACTION_TYPES.REDUCE_DEFUSE_CARDS,\r\n    };\r\n  } else {\r\n    // dispatch(showFlippedCard(data.cardName, \"You Loose\"));\r\n    return {\r\n      type: CARD_ACTION_TYPES.EXPLODE_CARD,\r\n    };\r\n  }\r\n};\r\n\r\nconst cardConditions = (data) => {\r\n  console.log(\"Card conditions ; \", data);\r\n  return (dispatch) => {\r\n    switch (data.cardName) {\r\n      case \"CAT_CARD\":\r\n        dispatch(showFlippedCard(data.cardName, \"You are safe\"));\r\n        break;\r\n      case \"SHUFFLE_CARD\":\r\n        dispatch(\r\n          showFlippedCard(\r\n            data.cardName,\r\n            \"Game has been reset. Please draw cards again.\"\r\n          )\r\n        );\r\n        dispatch({ type: CARD_ACTION_TYPES.SHUFFLE_CARD });\r\n        dispatch(cardSetup());\r\n        break;\r\n      case \"EXPLODE_CARD\":\r\n        dispatch(explodeCard(data));\r\n        break;\r\n      case \"DEFUSE_CARD\":\r\n        dispatch(showFlippedCard(data.cardName, \"Great! You can defuse bomb.\"));\r\n        dispatch({ type: CARD_ACTION_TYPES.DEFUSE_CARD });\r\n        break;\r\n      case \"YOU_WON\":\r\n        dispatch({ type: CARD_ACTION_TYPES.GAME_WON });\r\n        break;\r\n      default:\r\n        dispatch(showFlippedCard(data.cardName, \"No card drawn yet\"));\r\n    }\r\n  };\r\n};\r\n\r\nexport {\r\n  resetGame,\r\n  cardSetup,\r\n  showFlippedCard,\r\n  cardConditions,\r\n  shuffleCard,\r\n  explodeCard,\r\n};\r\n","import React, { useEffect, useRef } from 'react'\r\nimport LeaderBoard from './LeaderBoard'\r\nimport \"../App.css\"\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { cardSetup, resetGame, cardConditions } from '../Redux/Card/cardActions';\r\nimport { useLocation } from \"react-router-dom\"\r\n\r\nfunction GameScreen() {\r\n    const { search } = useLocation();\r\n    let playerName = new URLSearchParams(search).get(\"name\");\r\n    const dispatch = useDispatch();\r\n    const defaultStates = useSelector(state => state.card)\r\n    const drawnCard = useRef(null)\r\n    console.log(defaultStates)\r\n\r\n    useEffect(() => {\r\n        // Rules popup\r\n        alert(`Rules:\\n1. Click on the deck of cards to draw a card.If the card drawn from the deck is a cat card, then the card is removed and you are safe.\\n2. If the card is exploding kitten (bomb) then the player loses the game immediately.\\n3. If the card is defusing card, then the card is removed from the deck. But still this card can be used to defuse one bomb that may come in subsequenct cards drawn from the deck.\\n4. If the card is a shuffle card, then the game is restarted and the deck is filled with 5 cards again.\\n5. A player wins if he successfuly draws all card from the deck`)\r\n        // Initial setup of the card for new user\r\n        dispatch(cardSetup());\r\n    }, [])\r\n\r\n    const resetCards = () => {\r\n        dispatch(resetGame());\r\n        dispatch(cardSetup());\r\n    }\r\n    const drawRandomCard = () => {\r\n        let randomCardIndex = Math.floor(Math.random() * defaultStates.deckOfCards.length);\r\n        let randomCard = defaultStates.deckOfCards.splice(randomCardIndex, 1)[0];\r\n        document.querySelector(\".drawn-card\").style.transform = \"rotateY(360deg)\"\r\n        if (defaultStates.deckOfCards.length > 0) {\r\n            let dataObject = {\r\n                remainingCards: defaultStates.deckOfCards,\r\n                cardName: randomCard ?? \"YOU_WON\",\r\n                totalDefuseCard: defaultStates.defuseCardCount\r\n            }\r\n            dispatch(cardConditions(dataObject))\r\n        } else {\r\n            switch (randomCard) {\r\n                case \"CAT_CARD\":\r\n                    let catCardData = {\r\n                        remainingCards: defaultStates.deckOfCards,\r\n                        cardName: \"YOU_WON\",\r\n                        totalDefuseCard: defaultStates.defuseCardCount\r\n                    }\r\n                    dispatch(cardConditions(catCardData))\r\n                    break\r\n                case \"SHUFFLE_CARD\":\r\n                    let shuffleCardData = {\r\n                        remainingCards: defaultStates.deckOfCards,\r\n                        cardName: randomCard,\r\n                        totalDefuseCard: defaultStates.defuseCardCount\r\n                    }\r\n                    dispatch(cardConditions(shuffleCardData))\r\n                    break;\r\n                case \"EXPLODE_CARD\":\r\n                    let explodeCard = {\r\n                        remainingCards: defaultStates.deckOfCards,\r\n                        cardName: randomCard,\r\n                        totalDefuseCard: defaultStates.defuseCardCount\r\n                    }\r\n                    if (defaultStates.defuseCardCount > 0) {\r\n                        explodeCard.cardName = \"YOU_WON\"\r\n                        dispatch(cardConditions(explodeCard))\r\n                    } else {\r\n                        explodeCard.cardName = randomCard\r\n                        dispatch(cardConditions(explodeCard))\r\n                    }\r\n                    break;\r\n                case \"DEFUSE_CARD\":\r\n                    let defuseCard = {\r\n                        remainingCards: defaultStates.deckOfCards,\r\n                        cardName: \"YOU_WON\",\r\n                        totalDefuseCard: defaultStates.defuseCardCount\r\n                    }\r\n                    dispatch(cardConditions(defuseCard))\r\n                    break;\r\n                default:\r\n                    console.log(\"\");\r\n            }\r\n\r\n        }\r\n        // console.log(defaultStates.deckOfCards, randomItem)\r\n    }\r\n\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <section className=\"game-screen\">\r\n                <h2 style={{ textAlign: \"center\" }}>Welcome, {playerName}</h2>\r\n                <div className=\"card-holder\">\r\n                    <div className=\"drawn-card\" ref={drawnCard}>\r\n                        <label className=\"card-labels\">Your card is {defaultStates.drawnCard} <br /> {defaultStates.message}</label>\r\n                    </div>\r\n                    <div className=\"defuse-card\">\r\n                        <label className=\"card-labels\">Defuse Card : {defaultStates.defuseCardCount}</label>\r\n                    </div>\r\n                    <div className=\"flipped-card-wrapper\" onClick={drawRandomCard}>\r\n                        <ul>\r\n                            {\r\n                                defaultStates.deckOfCards.length > 0 ? Array(defaultStates.deckOfCards.length).fill().map((x) => <li className=\"flipped-card\" key={x}></li>) : <li className=\"no-card\" ></li>\r\n                            }\r\n                        </ul>\r\n                        <label className=\"card-labels\">Cards left : {defaultStates.deckOfCards.length}</label>\r\n                    </div>\r\n                </div>\r\n                <div className=\"game-status\">\r\n                    {defaultStates.gameStatus === 1 ? \"Sorry you loose,Please click reset the game.\" : defaultStates.gameStatus === 2 ? \"Congratulations for winning\" : \"Game Status\"}\r\n                </div>\r\n                <div className=\"btn-holder\">\r\n                    <button className=\"control-btn red\" onClick={resetCards}>\r\n                        Reset\r\n                    </button>\r\n                </div>\r\n            </section>\r\n            <section className=\"leader-panel\">\r\n                <LeaderBoard />\r\n            </section>\r\n\r\n        </React.Fragment >\r\n    )\r\n}\r\n\r\nexport default GameScreen\r\n\r\n","import { CARD_ACTION_TYPES } from \"./cardActions\";\r\n\r\nconst initialState = {\r\n  numberOfCards: 5,\r\n  gameStatus: 0,\r\n  defuseCardCount: 0,\r\n  finalScore: 0,\r\n  drawnCard: \"\",\r\n  deckOfCards: [],\r\n  message: \"\",\r\n};\r\n\r\nexport default function cardReducer(state = initialState, action) {\r\n  const { payload, type } = action;\r\n  switch (type) {\r\n    case CARD_ACTION_TYPES.RESET_GAME:\r\n      return {\r\n        ...state,\r\n        numberOfCards: 5,\r\n        defuseCardCount: 0,\r\n        finalScore: 0,\r\n        drawnCard: \"\",\r\n        message: \"\",\r\n        gameStatus: 0,\r\n      };\r\n    // return ();\r\n\r\n    case CARD_ACTION_TYPES.ADD_RANDOM_CARDS:\r\n      return {\r\n        ...state,\r\n        deckOfCards: payload,\r\n      };\r\n\r\n    case CARD_ACTION_TYPES.CARD_FLIPPED:\r\n      return {\r\n        ...state,\r\n        drawnCard: payload.cardName,\r\n        message: payload.message,\r\n      };\r\n\r\n    case CARD_ACTION_TYPES.DEFUSE_CARD:\r\n      return {\r\n        ...state,\r\n        defuseCardCount: state.defuseCardCount + 1,\r\n      };\r\n\r\n    case CARD_ACTION_TYPES.SHUFFLE_CARD:\r\n      return {\r\n        ...state,\r\n        numberOfCards: 5,\r\n        gameStatus: 0,\r\n        defuseCardCount: 0,\r\n        finalScore: 0,\r\n      };\r\n    case CARD_ACTION_TYPES.REDUCE_DEFUSE_CARDS:\r\n      return {\r\n        ...state,\r\n        defuseCardCount: state.defuseCardCount - 1,\r\n        drawnCard: \"EXPLODE_CARD\",\r\n        message: \"Defuse card saved you.\",\r\n      };\r\n\r\n    case CARD_ACTION_TYPES.EXPLODE_CARD:\r\n      return {\r\n        ...state,\r\n        numberOfCards: 5,\r\n        gameStatus: 1,\r\n        defuseCardCount: 0,\r\n        finalScore: 0,\r\n        drawnCard: \"EXPLODE_CARD\",\r\n        deckOfCards: [],\r\n        message: \"Bomb exploded.You loose.\",\r\n      };\r\n\r\n    case CARD_ACTION_TYPES.GAME_WON:\r\n      return {\r\n        ...state,\r\n        numberOfCards: 5,\r\n        gameStatus: 2,\r\n        defuseCardCount: 0,\r\n        finalScore: 1,\r\n        drawnCard: \"NO CARDS LEFT\",\r\n        deckOfCards: [],\r\n        message: \"YOU WON\",\r\n      };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport cardReducer from \"./Card/cardReducer\";\r\n\r\nexport default combineReducers({\r\n  card: cardReducer,\r\n});\r\n","import { createStore, applyMiddleware, compose } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport rootReducer from \"./Redux/rootReducer\";\r\n\r\nconst middleware = [thunk];\r\nconst initialState = {};\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  compose(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport AuthScreen from \"./Components/AuthScreen\";\nimport GameScreen from \"./Components/GameScreen\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <main>\n        <Router>\n          <Routes>\n            <Route path=\"/\" element={<AuthScreen />}></Route>\n            <Route path=\"/game-screen\" element={<GameScreen />}></Route>\n            {/* <Route path=\"*\" element={<ErrorPage />}></Route> */}\n          </Routes>\n        </Router>\n      </main>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}